/*
 * Copyright (c) 2016, Christoph Engelbert (aka noctarius) and
 * contributors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.noctarius.borabora.spi.builder;

import java.util.ArrayList;
import java.util.List;

public interface TagSupport {

    /**
     * Creates a semantic tag writer pipeline. The given type must be an interface that
     * represents the start of a builder. Passing a type of a non-interface will throw an
     * {@link IllegalArgumentException}. Calls on the interface methods are captured and
     * stored. When {@link TagBuilder#endSemanticTag()} is called the returned
     * {@link TagBuilderConsumer} is automatically generated by all captured calls
     * and immediately replayed on the actual stream.
     *
     * @param type the interface type of the builder
     * @param <S>  the type of the builder
     * @return a proxy to the given interface type
     * @throws IllegalArgumentException if the passed class does not represent an interface type
     */
    static <S> S semanticTag(Class<S> type) {
        List<TagSupport0.MethodInvocation> methodInvocations = new ArrayList<>();
        TagSupport0.MethodInvocationHandler methodInvocationHandler = new TagSupport0.MethodInvocationHandler(type,
                methodInvocations);
        return TagSupport0.proxy(type, methodInvocationHandler);
    }

}
